Q1))
#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int main() {
    int frames[MAX_FRAMES], freq[MAX_FRAMES], time[MAX_FRAMES];
    int pages[MAX_PAGES], n_frames, n_pages;
    int page_faults = 0;
    int i, j, min_freq, pos;

    printf("Enter number of frames: ");
    scanf("%d", &n_frames);

    printf("Enter number of pages: ");
    scanf("%d", &n_pages);

    printf("Enter the reference string: ");
    for (i = 0; i < n_pages; i++)
        scanf("%d", &pages[i]);

    for (i = 0; i < n_frames; i++) {
        frames[i] = -1; 
        freq[i] = 0;  
        time[i] = 0;    
    }

    int current_time = 0;

    for (i = 0; i < n_pages; i++) {
        int page = pages[i];
        current_time++;

    
        int found = -1;
        for (j = 0; j < n_frames; j++) {
            if (frames[j] == page) {
                found = j;
                break;
            }
        }

        if (found != -1) {
            
            freq[found]++;
            time[found] = current_time;
        } else {
            
            page_faults++;

        
            int empty = -1;
            for (j = 0; j < n_frames; j++) {
                if (frames[j] == -1) {
                    empty = j;
                    break;
                }
            }

            if (empty != -1) {
                frames[empty] = page;
                freq[empty] = 1;
                time[empty] = current_time;
            } else {
               
                min_freq = freq[0];
                pos = 0;
                for (j = 1; j < n_frames; j++) {
                    if (freq[j] < min_freq) {
                        min_freq = freq[j];
                        pos = j;
                    } else if (freq[j] == min_freq) {
                        if (time[j] < time[pos])
                            pos = j;
                    }
                }
                frames[pos] = page;
                freq[pos] = 1;         
                time[pos] = current_time;
            }
        }

        
        printf("Page %d -> Frames: ", page);
        for (j = 0; j < n_frames; j++)
            if (frames[j] != -1)
                printf("%d ", frames[j]);
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
    return 0;
}



Q2)
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <dirent.h>
#include <unistd.h>
int make_toks(char *s, char *tok[])
{
 int i = 0;
 char *p;
 p = strtok(s, " ");
while(p != NULL)
{
 tok[i++] = p;
 p = strtok(NULL, " ");
}
tok[i] = NULL;
return i;
}
void typeline(char *op, char *fn)
{
 int fh, i, j, n;
 char c;
fh = open(fn, O_RDONLY);
if(fh == -1)
{
printf("File %s not found.\n", fn);
return;
}
if(strcmp(op, "a") == 0)
{
 while(read(fh, &c, 1) > 0)
 printf("%c", c);
 close(fh);
 return;
}
n = atoi(op);
if(n > 0) 
i = 0;
 while(read(fh, &c, 1) > 0)
 {
 printf("%c", c);
if(c == '\n')
 i++;
 if(i == n)
 break;
}
}
if(n < 0)
{
 i = 0;
 while(read(fh, &c, 1) > 0)
 {
 if(c == '\n') i++;
 }
 lseek(fh, 0, SEEK_SET);
j = 0;
while(read(fh, &c, 1) > 0)
{
 if(c == '\n')
 j++;
 if(j == i+n+1)
 break;
}
while(read(fh, &c, 1) > 0)
{
 printf("%c", c);
}
}
close(fh);
}
int main()
{
 char buff[80], *args[10];
 while(1)
 {
 printf ("\n");
 printf("\nmyshell$ ");
 fgets(buff, 80, stdin);
 buff[strlen(buff)-1] = '\0';
 int n = make_toks(buff, args);
 switch (n)
 {
 case 1: if(strcmp(args[0], "exit") == 0)
exit(1);
if (!fork())
execlp (args [0], args[0], NULL);
break;
 case 2:
if (!fork ()) 
execlp (args [0], args[0], args[1], NULL);
break;
 case 3: if (strcmp(args[0], "typeline") == 0)
 typeline (args[1], args[2]);
else
{
 if (!fork ())
execlp (args [0], args[0], args[1], args[2], NULL);
}
break;
case 4:
if (!fork ())
execlp (args [0], args [0], args [1], args [2], args [3], NULL); break;
}
}
return 0;
} 
