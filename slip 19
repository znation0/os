Q1)
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
 while(p!=NULL) 
 { tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp = opendir(dn); 
 if(dp==NULL) 
 { 
 printf("Dir %s not found.\n",dn); 
 return; 
 } 

 switch(op) 
 { 
 case 'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } break; 
 case 'n': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_DIR) dc++; 
 if(entry->d_type==DT_REG) fc++; 
 } 
 printf("%d Dir(s)\t%d File(s)\n",dc,fc); 
 break; 
 case 'i': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\t%lu\n",entry->d_name,entry->d_fileno); 
 } 
 } 
 closedir(dp); 
} 
int main() { 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("myshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
 if(execvp(args[0],args)==-1) 
 printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}

Q2)
#include<stdio.h>
     int main()
    {
      
      int  n;
   printf("Enter Total Number of Processes:");
   scanf("%d", &n);
  int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
    int x = n;
   
   for(int i = 0; i < n; i++)
   {
        printf("Enter Details of Process %d \n", i + 1);
           printf("Arrival Time:  ");
           
       scanf("%d", &arr_time[i]);
        printf("Burst Time:   ");
        
        scanf("%d", &burst_time[i]);
         temp_burst_time[i] = burst_time[i];
    }

  
    int time_slot;
    printf("Enter Time Slot:");
     scanf("%d", &time_slot);

   int total = 0,  counter = 0,i;
   printf("Process ID       Burst Time       Turnaround Time      Waiting Time\n");
    for(total=0, i = 0; x!=0; )  
   {  
        if(temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)    
         {  
           total = total + temp_burst_time[i];  
           temp_burst_time[i] = 0;  
             counter=1;  
        }     
      else if(temp_burst_time[i] > 0)  
         {  
       temp_burst_time[i] = temp_burst_time[i] - time_slot;  
            total  += time_slot;    
       }
       
     if(temp_burst_time[i]==0 && counter==1)  
           {  
                 x--; 
               printf("\nProcess No %d  \t\t %d\t\t %d\t\t\t %d", i+1, burst_time[i],
                       total-arr_time[i], total-arr_time[i]-burst_time[i]);  
             wait_time = wait_time+total-arr_time[i]-burst_time[i];  
               ta_time += total -arr_time[i];  
            counter =0;     
         }  
         
             if(i==n-1)  
        {  
                 i=0;  
            }  
            
           else if(arr_time[i+1]<=total)  
            {  
                i++;  
        }  
        
          else  
            {  
              i=0;  
            }  
      }  
      
       float average_wait_time = wait_time * 1.0 / n;
   float average_turnaround_time = ta_time * 1.0 / n;
       printf("\nAverage Waiting Time:%f", average_wait_time);
      printf("\nAvg Turnaround Time:%f", average_turnaround_time);
      return 0;
     }
