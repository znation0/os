Q1)
#include<stdio.h>
int frame[5][2],nf; 
int searchFrames(int sv) 
{ 
 int x; 
 for(x=0;x<nf;x++) 
 { 
 if(sv==frame[x][0])
 { 
 return x; 
 } 
 } 
 return -2; 
} 
void displayMemory() 
{ 
 int i; 
 printf("\n\nFrame Contains |"); 
 for(i=0;i<nf;i++) 
 printf(" %d | ",frame[i][0]); 
} 
int findFreeFrame() 
{ 
 int i,max=frame[0][1],ri=0; 
 for(i=0;i<nf;i++) 
 { 
 if(frame[i][1]==-1) 
 { 
 return i; 
 } 
 } 
 for(i=0;i<nf;i++) 
 { 
 if(max<frame[i][1]) 
 { 
 max=frame[i][1]; 
 ri=i; 
 } 
 } 
 return ri; 
} 
main() 
{ 
 int rs[]={12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8}; 
 int ts=0; 
 int n=16,i,j,pf=0,srch,insert_index; 
 printf("Enter how many frames"); 
 scanf("%d",&nf); 
 for(i=0;i<nf;i++) 
 { 
 for(j=0;j<2;j++) 
 frame[i][j]=-1; 
 } 
 displayMemory(); 
 for(i=0;i<n;i++)
 { 
 srch=searchFrames(rs[i]); 
 if(srch==-2) 
 { 
 pf++; 
 insert_index=findFreeFrame(); 
 frame[insert_index][0]=rs[i]; 
 frame[insert_index][1]=ts++; 
 } 
 else
 { 
 frame[srch][1]=ts++; 
 } 
 
 displayMemory(); 
 } 
 printf("\n\nTotal Page Faults Occured is %d\n",pf); 
}


Q2)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 100

void searchPattern(char *mode, char *filename, char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found!\n");
        return;
    }
    char line[256];
    int lineNum = 0, found = 0;
    while (fgets(line, sizeof(line), fp)) {
        lineNum++;
        if (strstr(line, pattern)) {
            found = 1;
            if (strcmp(mode, "f") == 0) {
                printf("First occurrence at line %d: %s", lineNum, line);
                break;
            } else if (strcmp(mode, "a") == 0)
                printf("Found at line %d: %s", lineNum, line);
        }
    }
    fclose(fp);
    if (!found)
        printf("Pattern not found.\n");
}

int main() {
    char input[MAX], *args[10];
    char *token;
    pid_t pid;
    while (1) {
        printf("myshell$ ");
        fgets(input, MAX, stdin);
        input[strlen(input) - 1] = '\0';
        if (strcmp(input, "exit") == 0)
            break;
        int i = 0;
        token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;
        if (args[0] == NULL)
            continue;
        if (strcmp(args[0], "search") == 0) {
            if (i == 4 && (strcmp(args[1], "f") == 0 || strcmp(args[1], "a") == 0))
                searchPattern(args[1], args[2], args[3]);
            else
                printf("Usage:\n search f filename pattern\n search a filename pattern\n");
            continue;
        }
        pid = fork();
        if (pid == 0) {
            if (execvp(args[0], args) == -1)
                perror("Command execution failed");
            exit(0);
        } else if (pid > 0)
            wait(NULL);
        else
            perror("Fork failed");
    }
    return 0;
}
