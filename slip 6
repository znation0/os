Q1)
#include <stdio.h>

int main() {
    int n, frames[10], pages[15], page_faults = 0;
    int i, j, k, flag, mru[10], max, pos;

    printf("Enter the number of frames: ");
    scanf("%d", &n);

    printf("Enter the reference string: ");
    for (i = 0; i < 15; i++)
        scanf("%d", &pages[i]);

    for (i = 0; i < n; i++) {
        frames[i] = -1;
        mru[i] = 0;
    }

    for (i = 0; i < 15; i++) {
        flag = 0;
        for (j = 0; j < n; j++) {
            if (frames[j] == pages[i]) {
                flag = 1;
                mru[j] = i + 1;
                break;
            }
        }

        if (flag == 0) {
            int empty = -1;
            for (j = 0; j < n; j++) {
                if (frames[j] == -1) {
                    empty = j;
                    break;
                }
            }

            if (empty != -1) {
                frames[empty] = pages[i];
                mru[empty] = i + 1;
                page_faults++;
            } else {
                pos = 0;
                max = mru[0];
                for (k = 1; k < n; k++) {
                    if (mru[k] > max) {
                        max = mru[k];
                        pos = k;
                    }
                }
                frames[pos] = pages[i];
                mru[pos] = i + 1;
                page_faults++;
            }
        }

        printf("\nPage %d: ", pages[i]);
        for (j = 0; j < n; j++)
            printf("%d ", frames[j]);
    }

    printf("\n\nTotal number of page faults: %d\n", page_faults);
    return 0;
}


Q2)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 100

void searchPattern(char *mode, char *filename, char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found!\n");
        return;
    }
    char line[256];
    int lineNum = 0, found = 0;
    while (fgets(line, sizeof(line), fp)) {
        lineNum++;
        if (strstr(line, pattern)) {
            found = 1;
            if (strcmp(mode, "f") == 0) {
                printf("First occurrence at line %d: %s", lineNum, line);
                break;
            } else if (strcmp(mode, "a") == 0)
                printf("Found at line %d: %s", lineNum, line);
        }
    }
    fclose(fp);
    if (!found)
        printf("Pattern not found.\n");
}

int main() {
    char input[MAX], *args[10];
    char *token;
    pid_t pid;
    while (1) {
        printf("myshell$ ");
        fgets(input, MAX, stdin);
        input[strlen(input) - 1] = '\0';
        if (strcmp(input, "exit") == 0)
            break;
        int i = 0;
        token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;
        if (args[0] == NULL)
            continue;
        if (strcmp(args[0], "search") == 0) {
            if (i == 4 && (strcmp(args[1], "f") == 0 || strcmp(args[1], "a") == 0))
                searchPattern(args[1], args[2], args[3]);
            else
                printf("Usage:\n search f filename pattern\n search a filename pattern\n");
            continue;
        }
        pid = fork();
        if (pid == 0) {
            if (execvp(args[0], args) == -1)
                perror("Command execution failed");
            exit(0);
        } else if (pid > 0)
            wait(NULL);
        else
            perror("Fork failed");
    }
    return 0;
}
