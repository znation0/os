Q1)
#include<stdio.h>
int main() 
{ 
 int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, 
flag2, flag3, i, j, k, pos, max, faults = 0; 
 printf("Enter number of frames: "); 
 scanf("%d", &no_of_frames); 
 
 printf("Enter number of pages: "); 
 scanf("%d", &no_of_pages); 
 
 printf("Enter page reference string: ");
 for(i = 0; i < no_of_pages; ++i){ 
 scanf("%d", &pages[i]); 
 } 
 
 for(i = 0; i < no_of_frames; ++i){ 
 frames[i] = -1; 
 } 
 
 for(i = 0; i < no_of_pages; ++i){ 
 flag1 = flag2 = 0; 
 
 for(j = 0; j < no_of_frames; ++j){ 
 if(frames[j] == pages[i]){ 
 flag1 = flag2 = 1; 
 break; 
 } 
 } 
 
 if(flag1 == 0){ 
 for(j = 0; j < no_of_frames; ++j){ 
 if(frames[j] == -1){ 
 faults++; 
 frames[j] = pages[i]; 
 flag2 = 1; 
 break; 
 } 
 } 
 } 
 
 if(flag2 == 0){ 
 flag3 =0; 
 
 for(j = 0; j < no_of_frames; ++j){ 
 temp[j] = -1; 
 
 for(k = i + 1; k < no_of_pages; ++k){ 
 if(frames[j] == pages[k]){ 
 temp[j] = k; 
 break; 
 } 
 } 
 } 
 
 for(j = 0; j < no_of_frames; ++j){ 
 if(temp[j] == -1){ 
 pos = j; 
 flag3 = 1;
 break; 
 } 
 } 
 
 if(flag3 ==0){ 
 max = temp[0]; 
 pos = 0; 
 
 for(j = 1; j < no_of_frames; ++j){ 
 if(temp[j] > max){ 
 max = temp[j]; 
 pos = j; 
 } 
 } 
 } 
frames[pos] = pages[i]; 
faults++; 
 } 
 printf("\n"); 
 for(j = 0; j < no_of_frames; ++j){ 
 printf("%d\t", frames[j]); 
 } 
 } 
 printf("\n\nTotal Page Faults = %d", faults); 
 
 return 0; 
}

Q2)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 100

void searchPattern(char *mode, char *filename, char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found!\n");
        return;
    }
    char line[256];
    int lineNum = 0, found = 0;
    while (fgets(line, sizeof(line), fp)) {
        lineNum++;
        if (strstr(line, pattern)) {
            found = 1;
            if (strcmp(mode, "f") == 0) {
                printf("First occurrence at line %d: %s", lineNum, line);
                break;
            } else if (strcmp(mode, "a") == 0) {
                printf("Found at line %d: %s", lineNum, line);
            }
        }
    }
    fclose(fp);
    if (!found)
        printf("Pattern not found.\n");
}

int main() {
    char input[MAX], *args[10];
    char *token;
    pid_t pid;
    while (1) {
        printf("myshell$ ");
        fgets(input, MAX, stdin);
        input[strlen(input) - 1] = '\0';
        if (strcmp(input, "exit") == 0)
            break;
        int i = 0;
        token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;
        if (args[0] == NULL)
            continue;
        if (strcmp(args[0], "search") == 0) {
            if (i == 4 && (strcmp(args[1], "f") == 0 || strcmp(args[1], "a") == 0))
                searchPattern(args[1], args[2], args[3]);
            else
                printf("Usage:\n search f filename pattern\n search a filename pattern\n");
            continue;
        }
        pid = fork();
        if (pid == 0) {
            if (execvp(args[0], args) == -1)
                perror("Command execution failed");
            exit(0);
        } else if (pid > 0)
            wait(NULL);
        else
            perror("Fork failed");
    }
    return 0;
}

