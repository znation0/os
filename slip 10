Q1)
#include<stdio.h>
int frame[5][2],nf; 
int searchFrames(int sv) 
{ 
 int x; 
 for(x=0;x<nf;x++) 
 { 
 if(sv==frame[x][0]) 
 { 
 return 0; 
 } 
 } 
 return 1; 
} 
void displayMemory() 
{ 
 int i; 
 printf("\n\nFrame Contains |"); 
 for(i=0;i<nf;i++) 
 printf(" %d | ",frame[i][0]); 
}
int findFreeFrame() 
{ 
 int i,min=frame[0][1],ri=0; 
 for(i=0;i<nf;i++) 
 { 
 if(frame[i][1]==-1) 
 { 
 return i; 
 } 
 } 
 //LRU
 for(i=0;i<nf;i++) 
 { 
 if(min>frame[i][1]) 
 { 
 min=frame[i][1]; 
 ri=i; 
 } 
 } 
 return ri; 
} 
main() 
{ 
 int rs[]={2, 4, 5, 6, 9, 4, 7, 3, 4, 5, 6, 7, 2, 4, 7, 1}; 
 int ts=0; 
 int n=15,i,j,pf=0,srch,insert_index; 
 printf("Enter how many frames"); 
 scanf("%d",&nf); 
 for(i=0;i<nf;i++) 
 { 
 for(j=0;j<2;j++) 
 frame[i][j]=-1; 
 } 
 displayMemory(); 
 for(i=0;i<n;i++) 
 { 
 srch=searchFrames(rs[i]); 
 if(srch==1) 
 { 
 pf++; 
 insert_index=findFreeFrame(); 
 frame[insert_index][0]=rs[i]; 
 frame[insert_index][1]=ts++; 
 } 
 
 displayMemory(); 
 } 
 printf("\n\nTotal Page Faults Occured is %d\n",pf);
 }

 Q2)
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <sys/wait.h>

void make_toks(char *s, char *tok[])
{
    int i=0;
    char *p=strtok(s," \n");
    while(p!=NULL)
    {
        tok[i++]=p;
        p=strtok(NULL," \n");
    }
    tok[i]=NULL;
}

void list(char *dn, char op)
{
    DIR *dp;
    struct dirent *entry;
    dp=opendir(dn);
    if(dp==NULL){printf("Dir %s not found.\n",dn); return;}
    if(op=='f')
        while((entry=readdir(dp))!=NULL)
            if(entry->d_type==DT_REG) printf("%s\n",entry->d_name);
    else if(op=='i')
        while((entry=readdir(dp))!=NULL)
            if(entry->d_type==DT_REG) printf("%s\t%lu\n",entry->d_name,entry->d_ino);
    closedir(dp);
}

int main()
{
    char buff[1024],*args[64];
    int pid;
    while(1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff,1024,stdin);
        buff[strlen(buff)-1]='\0';
        make_toks(buff,args);
        if(args[0]==NULL) continue;
        if(strcmp(args[0],"exit")==0) break;
        if(strcmp(args[0],"list")==0)
        {
            if(args[1]==NULL || args[2]==NULL) {printf("Usage: list [f|i] dirname\n"); continue;}
            list(args[2],args[1][0]);
            continue;
        }
        pid=fork();
        if(pid>0) wait(NULL);
        else
        {
            if(execvp(args[0],args)==-1) printf("Bad command.\n");
            exit(0);
        }
    }
    return 0;
}

