Q1)
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <dirent.h>
#include <unistd.h>
int make_toks(char *s, char *tok[]) 
{ 
 int i = 0; 
 char *p; 
 p = strtok(s, " "); 
while(p != NULL) 
{ 
 tok[i++] = p; 
 p = strtok(NULL, " "); 
} 
tok[i] = NULL; 
return i; 
} 
void typeline(char *op, char *fn) 
{ 
 int fh, i, j, n; 
 char c; 
fh = open(fn, O_RDONLY); 
if(fh == -1) 
{ 
printf("File %s not found.\n", fn); 
return; 
} 
if(strcmp(op, "a") == 0) 
{ 
 while(read(fh, &c, 1) > 0) 
 printf("%c", c); 
 close(fh); 
 return; 
} 
n = atoi(op); 
if(n > 0) 
{ 
 i = 0; 
 while(read(fh, &c, 1) > 0) 
 { 
 printf("%c", c); 

 if(c == '\n') 
 i++; 
 if(i == n) 
 break; 
} 
} 
if(n < 0) 
{ 
 i = 0; 
 while(read(fh, &c, 1) > 0) 
 { 
 if(c == '\n') i++; 
 } 
 lseek(fh, 0, SEEK_SET); 
j = 0; 
while(read(fh, &c, 1) > 0) 
{ 
 if(c == '\n') 
 j++; 
 if(j == i+n+1) 
 break; 
} 
while(read(fh, &c, 1) > 0) 
{ 
 printf("%c", c); 
} 
} 
close(fh); 
} 
int main() 
{ 
 char buff[80], *args[10]; 
 while(1) 
 { 
 printf ("\n"); 
 printf("\nmyshell$ "); 
 fgets(buff, 80, stdin); 
 buff[strlen(buff)-1] = '\0'; 
 int n = make_toks(buff, args); 
 switch (n) 
 { 
 case 1: if(strcmp(args[0], "exit") == 0) 
exit(1); 
if (!fork()) 
execlp (args [0], args[0], NULL); 
break; 
 case 2: 
if (!fork ()) 

execlp (args [0], args[0], args[1], NULL); 
break; 
 case 3: if (strcmp(args[0], "typeline") == 0) 
 typeline (args[1], args[2]); 
else
{ 
 if (!fork ()) 
execlp (args [0], args[0], args[1], args[2], NULL); 
} 
break; 
case 4: 
if (!fork ()) 
execlp (args [0], args [0], args [1], args [2], args [3], NULL); 
break; 
} 
} 
return 0; 
}

Q2)
#include<stdio.h>
int main()
{
            int at[10],bt[10],pr[10];
            int n,i,j,temp,time=0,count,over=0,sum_wait=0,sum_turnaround=0,start;
            float avgwait,avgturn;
            printf("Enter the number of processes\n");
            scanf("%d",&n);
            for(i=0;i<n;i++)
            {
                        printf("Enter the arrival time and execution time for process %d\n",i+1);
                        scanf("%d%d",&at[i],&bt[i]);
                        pr[i]=i+1;
            }
            for(i=0;i<n-1;i++)
            {
                        for(j=i+1;j<n;j++)
                        {
                                    if(at[i]>at[j])
                                    {
                                                temp=at[i];
                                                at[i]=at[j];
                                                at[j]=temp;
                                                
                                                temp=bt[i];
                                                bt[i]=bt[j];
                                                bt[j]=temp;
                                                
                                                temp=pr[i];
                                                pr[i]=pr[j];
                                                pr[j]=temp;     
                                    }
                        
                        }
            }
            printf("\n\nProcess\t|Arrival time\t|Execution time\t|Start time\t|End time\t|waiting                                     time\t|Turnaround time\n\n");
            while(over<n)
            {
                        count=0;
                        for(i=over;i<n;i++)
                        {
                                    if(at[i]<=time)
                                    count++;
                                    else
                                    break;
                        }
                        if(count>1)
                        {
                                    for(i=over;i<over+count-1;i++)
                                    {
                                                for(j=i+1;j<over+count;j++)
                                                {
                                                            if(bt[i]>bt[j])
                                                            {
                                                                        temp=at[i];
                                                                        at[i]=at[j];
                                                                        at[j]=temp;
                                                                        
                                                                        temp=bt[i];
                                                                        bt[i]=bt[j];
                                                                        bt[j]=temp;
                                                                        
                                                                        temp=pr[i];
                                                                        pr[i]=pr[j];
                                                                        pr[j]=temp;     
                                                            }
                                                }                     
                                    }
                        }
                        start=time;
                        time+=bt[over];
  printf("p[%d]\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\t|\t%d\n",pr[over],at[over],bt[over],start,time,time-at[over]-bt[over],time-at[over]);
                        sum_wait+=time-at[over]-bt[over];
           sum_turnaround+=time-at[over];
                        over++;
            }
            avgwait=(float)sum_wait/(float)n;
            avgturn=(float)sum_turnaround/(float)n;
            printf("Average waiting time is %f\n",avgwait);
            printf("Average turnaround time is %f\n",avgturn);
            return 0;
}
