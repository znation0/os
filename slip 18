Q1)
#include<stdio.h>
int frame[5][2],nf; 
int searchFrames(int sv) 
{ 
 int x; 
 for(x=0;x<nf;x++) 
 { 
 if(sv==frame[x][0]) 
 { 
 return x; 
 } 
 } 
 return -2; 
} 
void displayMemory() 
{ 
 int i; 
 printf("\n\nFrame Contains |"); 
 for(i=0;i<nf;i++) 
 printf(" %d | ",frame[i][0]); 
} 
int findFreeFrame() 
{ 
 int i,min=frame[0][1],ri=0; 
 for(i=0;i<nf;i++) 
 { 
 if(frame[i][1]==-1) 
 { 
 return i; 
 } 
 } 
 for(i=0;i<nf;i++) 
 { 

 if(min>frame[i][1]) 
 { 
 min=frame[i][1]; 
 ri=i; 
 } 
 } 
 return ri; 
} 
main() 
{ 
 int rs[]={3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6}; 
 int ts=0; 
 int n=15,i,j,pf=0,srch,insert_index; 
 printf("Enter how many frames"); 
 scanf("%d",&nf); 
 for(i=0;i<nf;i++) 
 { 
 for(j=0;j<2;j++) 
 frame[i][j]=-1; 
 } 
 displayMemory(); 
 for(i=0;i<n;i++) 
 { 
 srch=searchFrames(rs[i]); 
 if(srch==-2) 
 { 
 pf++; 
 insert_index=findFreeFrame(); 
 frame[insert_index][0]=rs[i]; 
 frame[insert_index][1]=ts++; 
 } 
 else
 { 
 frame[srch][1]=ts++; 
 } 
 
 displayMemory(); 
 } 
 printf("\n\nTotal Page Faults Occured is %d\n",pf); 
}

Q2)
#include<stdio.h>
void findWaitingTime(int processes[], int n, 
int bt[], int wt[]) 
{ 
wt[0] = 0; 
int i; 
for (i = 1; i < n ; i++ ){ 
wt[i] = bt[i-1] + wt[i-1] ; 
} 
} 
void findTurnAroundTime( int processes[], int n, 
int bt[], int wt[], int tat[]) 
{ 
int i; 
for ( i = 0; i < n ; i++) 
tat[i] = bt[i] + wt[i]; 
} 
void findavgTime( int processes[], int n, int bt[]) 
{ 
int wt[n], tat[n], total_wt = 0, total_tat = 0; 
findWaitingTime(processes, n, bt, wt); 
findTurnAroundTime(processes, n, bt, wt, tat); 
printf("Processes Burst time Waiting time Turn around time\n"); 
int i; 
for ( i=0; i<n; i++) 
{ 
total_wt = total_wt + wt[i]; 
total_tat = total_tat + tat[i]; 
printf(" %d ",(i+1)); 
printf(" %d ", bt[i] ); 

printf(" %d",wt[i] ); 
printf(" %d\n",tat[i] ); 
} 
int s=(float)total_wt / (float)n; 
int t=(float)total_tat / (float)n; 
printf("Average waiting time = %d",s); 
printf("\n"); 
printf("Average turn around time = %d ",t); 
} 
int main() 
{ 
int processes[] = { 1, 2, 3}; 
int n = sizeof processes / sizeof processes[0]; 
int burst_time[] = {10, 5, 8}; 
findavgTime(processes, n, burst_time); 
return 0; 
}
