Q1)
#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <dirent.h>
#include <unistd.h>
int make_toks(char *s, char *tok[]) 
{ 
 int i = 0; 
 char *p; 
 p = strtok(s, " "); 
while(p != NULL) 
{ 
 tok[i++] = p; 
 p = strtok(NULL, " "); 
} 
tok[i] = NULL; 
return i; 
} 
void typeline(char *op, char *fn) 
{ 
 int fh, i, j, n; 
 char c; 
fh = open(fn, O_RDONLY); 
if(fh == -1) 
{ 
printf("File %s not found.\n", fn); 
return; 
} 
if(strcmp(op, "a") == 0) 
{ 
 while(read(fh, &c, 1) > 0) 
 printf("%c", c); 
 close(fh); 
 return; 
} 
n = atoi(op); 
if(n > 0) 
{ 
 i = 0; 
 while(read(fh, &c, 1) > 0) 
 { 
 printf("%c", c);
 if(c == '\n') 
 i++; 
 if(i == n) 
 break; 
} 
} 
if(n < 0) 
{ 
 i = 0; 
 while(read(fh, &c, 1) > 0) 
 { 
 if(c == '\n') i++; 
 } 
 lseek(fh, 0, SEEK_SET); 
j = 0; 
while(read(fh, &c, 1) > 0) 
{ 
 if(c == '\n') 
 j++; 
 if(j == i+n+1) 
 break; 
} 
while(read(fh, &c, 1) > 0) 
{ 
 printf("%c", c); 
} 
} 
close(fh); 
} 
int main() 
{ 
 char buff[80], *args[10]; 
 while(1) 
 { 
 printf ("\n"); 
 printf("\nmyshell$ "); 
 fgets(buff, 80, stdin); 
 buff[strlen(buff)-1] = '\0'; 
 int n = make_toks(buff, args); 
 switch (n) 
 { 
 case 1: if(strcmp(args[0], "exit") == 0) 
exit(1); 
if (!fork()) 
execlp (args [0], args[0], NULL); 
break; 
 case 2: 
if (!fork ())
execlp (args [0], args[0], args[1], NULL); 
break; 
 case 3: if (strcmp(args[0], "typeline") == 0) 
 typeline (args[1], args[2]); 
else
{ 
 if (!fork ()) 
execlp (args [0], args[0], args[1], args[2], NULL); 
} 
break; 
case 4: 
if (!fork ()) 
execlp (args [0], args [0], args [1], args [2], args [3], NULL); 
break; 
} 
} 
return 0; 
}

Q2)
#include<stdio.h>
     int main()
    {
      
      int  n;
   printf("Enter Total Number of Processes:");
   scanf("%d", &n);
  int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
    int x = n;
   
   for(int i = 0; i < n; i++)
   {
        printf("Enter Details of Process %d \n", i + 1);
           printf("Arrival Time:  ");
           
       scanf("%d", &arr_time[i]);
        printf("Burst Time:   ");
        
        scanf("%d", &burst_time[i]);
         temp_burst_time[i] = burst_time[i];
    }

  
    int time_slot;
    printf("Enter Time Slot:");
     scanf("%d", &time_slot);

   int total = 0,  counter = 0,i;
   printf("Process ID       Burst Time       Turnaround Time      Waiting Time\n");
    for(total=0, i = 0; x!=0; )  
   {  
        if(temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)    
         {  
           total = total + temp_burst_time[i];  
           temp_burst_time[i] = 0;  
             counter=1;  
        }     
      else if(temp_burst_time[i] > 0)  
         {  
       temp_burst_time[i] = temp_burst_time[i] - time_slot;  
            total  += time_slot;    
       }
       
     if(temp_burst_time[i]==0 && counter==1)  
           {  
                 x--; 
               printf("\nProcess No %d  \t\t %d\t\t %d\t\t\t %d", i+1, burst_time[i],
                       total-arr_time[i], total-arr_time[i]-burst_time[i]);  
             wait_time = wait_time+total-arr_time[i]-burst_time[i];  
               ta_time += total -arr_time[i];  
            counter =0;     
         }  
         
             if(i==n-1)  
        {  
                 i=0;  
            }  
            
           else if(arr_time[i+1]<=total)  
            {  
                i++;  
        }  
        
          else  
            {  
              i=0;  
            }  
      }  
      
       float average_wait_time = wait_time * 1.0 / n;
   float average_turnaround_time = ta_time * 1.0 / n;
       printf("\nAverage Waiting Time:%f", average_wait_time);
      printf("\nAvg Turnaround Time:%f", average_turnaround_time);
      return 0;
     }
