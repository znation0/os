Q1)
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for(i = 0; i < n - 1; i++) {
        for(j = 0; j < n - i - 1; j++) {
            if(arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for(i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;
        while(j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void printArray(int arr[], int n) {
    for(int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int n;
    printf("Enter number of integers: ");
    scanf("%d", &n);

    int arr[n], arr_copy[n];
    printf("Enter %d integers: ", n);
    for(int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
        arr_copy[i] = arr[i]; // Copy for child process
    }

    pid_t pid = fork();

    if(pid < 0) {
        perror("fork failed");
        exit(1);
    }
    else if(pid == 0) {
        // Child process: Insertion Sort
        insertionSort(arr_copy, n);
        printf("Child process sorted array (Insertion Sort): ");
        printArray(arr_copy, n);
        exit(0);
    }
    else {
        // Parent process: Bubble Sort
        wait(NULL); // Wait for child to finish
        bubbleSort(arr, n);
        printf("Parent process sorted array (Bubble Sort): ");
        printArray(arr, n);
    }

    return 0;
}

Q2)

#include <sys/types.h>
#include<unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
while(p!=NULL) 
{ tok[i++]=p; 
 p=strtok(NULL," "); 
} 
tok[i]=NULL; 
} 
void count(char *fn, char op) 
{ int fh,cc=0,wc=0,lc=0; 
 char c; 
fh = open(fn,O_RDONLY); 
if(fh==-1) { 
printf("File %s not found.\n",fn); 
return; 
} 
while(read(fh,&c,1)>0) 
{ if(c==' ') 
 wc++; 
 else if(c=='\n') 
 { 
 wc++; 
 lc++; 
 } cc++; 
} close(fh); 
switch(op) 
{ 
 case 'c': 
printf("No.of characters:%d\n",cc-1); 
break; 
 case 'w': 
printf("No.of words:%d\n",wc); 
break; 
 case 'l': 
printf("No.of lines:%d\n",lc+1); 

break; 
} 
} int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) { printf("myshell$ "); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
if(strcmp(args[0],"count")==0) 
count(args[2],args[1][0]); 
else 
 { pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
if(execvp(args[0],args)==-1) 
printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}
