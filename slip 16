Q1)
#include <sys/types.h>
#include<unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
while(p!=NULL) 
{ tok[i++]=p; 
 p=strtok(NULL," "); 
} 
tok[i]=NULL; 
} 
void count(char *fn, char op) 
{ int fh,cc=0,wc=0,lc=0; 
 char c; 
fh = open(fn,O_RDONLY); 
if(fh==-1) { 
printf("File %s not found.\n",fn); 
return; 
} 
while(read(fh,&c,1)>0) 
{ if(c==' ') 
 wc++; 
 else if(c=='\n') 
 { 
 wc++; 
 lc++; 
 } cc++; 
} close(fh); 
switch(op) 
{ 
 case 'c': 
printf("No.of characters:%d\n",cc-1); 
break; 
 case 'w': 
printf("No.of words:%d\n",wc); 
break; 
 case 'l': 
printf("No.of lines:%d\n",lc+1);
break; 
} 
} int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) { printf("myshell$ "); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
if(strcmp(args[0],"count")==0) 
count(args[2],args[1][0]); 
else 
 { pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
if(execvp(args[0],args)==-1) 
printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}

Q2)
#include <stdio.h>
int main() 
{
    int n;
    int at[20], bt[20], pr[20], ct[20], tat[20], wt[20], done[20] = {0};
    int i, time = 0, completed = 0;
    float avg_tat = 0, avg_wt = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++) {
        printf("Enter AT, BT, Priority for P%d: ", i+1);
        scanf("%d %d %d", &at[i], &bt[i], &pr[i]);
    }

    while(completed < n) 
    {
        int idx = -1, min_pr = 9999;

        // choose process with min priority (arrived + not done)
        for(i = 0; i < n; i++)
         {
            if(at[i] <= time && done[i] == 0 && pr[i] < min_pr) {
                min_pr = pr[i];
                idx = i;
            }
        }

        if(idx == -1) 
        {
            time++; // no process has arrived
        } else 
        {
            time += bt[idx];
            ct[idx] = time;
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];
            done[idx] = 1;
            completed++;
        }
    }

    printf("\nP\tAT\tBT\tPR\tCT\tTAT\tWT\n");
    for(i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               i+1, at[i], bt[i], pr[i], ct[i], tat[i], wt[i]);
        avg_tat += tat[i];
        avg_wt += wt[i];
    }

    printf("\nAverage TAT = %.2f", avg_tat/n);
    printf("\nAverage WT  = %.2f\n", avg_wt/n);

    return 0;
    
    
    
    
    
}
