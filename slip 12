Q1)
#include<stdio.h>
int main()
{
int q[20],p[50],c=0,c1,d,f,i,j,k=0,n,r,t,b[20],c2[20];
printf("Enter no of pages:");
scanf("%d",&n);
printf("Enter the reference string:");
for(i=0;i<n;i++)
            scanf("%d",&p[i]);
printf("Enter no of frames:");
scanf("%d",&f);
q[k]=p[k];
printf("\n\t%d\n",q[k]);
c++;
k++;
for(i=1;i<n;i++)
            {
                        c1=0;
                        for(j=0;j<f;j++)
                        {
                                    if(p[i]!=q[j])
                                    c1++;
                        }
                        if(c1==f)
                        {
                                    c++;
                                    if(k<f)
                                    {
                                                q[k]=p[i];
                                                k++;
                                                for(j=0;j<k;j++)
                                                printf("\t%d",q[j]);
                                                printf("\n");
                                    }
                                    else
                                    {
                                                for(r=0;r<f;r++)
                                                {
                                                            c2[r]=0;
                                                            for(j=i-1;j<n;j--)
                                                            {
                                                            if(q[r]!=p[j])
                                                            c2[r]++;
                                                            else
                                                            break;
                                                }
                                    }
                                    for(r=0;r<f;r++)
                                     b[r]=c2[r];
                                    for(r=0;r<f;r++)
                                    {
                                                for(j=r;j<f;j++)
                                                {
                                                            if(b[r]<b[j])
                                                            {
                                                                        t=b[r];
                                                                        b[r]=b[j];
                                                                        b[j]=t;
                                                            }
                                                }
                                    }
                                    for(r=0;r<f;r++)
                                    {
                                                if(c2[r]==b[0])
                                                q[r]=p[i];
                                                printf("\t%d",q[r]);
                                    }
                                    printf("\n");
                        }
            }
}
printf("\nThe no of page faults is %d",c);
}


Q2)
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
 while(p!=NULL) 
 { tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp = opendir(dn); 
 if(dp==NULL) 
 { 
 printf("Dir %s not found.\n",dn); 
 return; 
 }
 switch(op) 
 { 
 case 'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } break; 
 case 'n': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_DIR) dc++; 
 if(entry->d_type==DT_REG) fc++; 
 } 
 printf("%d Dir(s)\t%d File(s)\n",dc,fc); 
 break; 
 case 'i': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\t%lu\n",entry->d_name,entry->d_fileno); 
 } 
 } 
 closedir(dp); 
} 
int main() { 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("myshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 {
 if(execvp(args[0],args)==-1) 
 printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}
