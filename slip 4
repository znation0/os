Q1)
#include<stdio.h>
#define MAX 20
int frames[MAX],ref[MAX],mem[MAX][MAX],faults, 
 sp,m,n,count[MAX]; 
void accept() 
{ 
int i; 
printf("Enter no.of frames:"); 
scanf("%d", &n);
printf("Enter no.of references:"); 
scanf("%d", &m); 
printf("Enter reference string:\n"); 
for(i=0;i<m;i++) 
 { 
 printf("[%d]=",i); 
 scanf("%d",&ref[i]); 
 } 
} 
void disp() 
{ 
int i,j; 
for(i=0;i<m;i++) 
 printf("%3d",ref[i]); 
printf("\n\n"); 
for(i=0;i<n;i++) 
 { 
 for(j=0;j<m;j++) 
 { 
 if(mem[i][j]) 
 printf("%3d",mem[i][j]); 
 else
 printf(" "); 
 } 
 printf("\n"); 
 } 
printf("Total Page Faults: %d\n",faults); 
} 
int search(int pno) 
{ 
int i; 
for(i=0;i<n;i++) 
 { 
 if(frames[i]==pno) 
 return i; 
 } 
return -1; 
}
int get_mfu(int sp) 
{ 
int i,max_i,max=-9999; 
 i=sp; 
do
 { 
 if(count[i]>max) 
 { 
 max = count[i]; 
 max_i = i; 
 } 
 i=(i+1)%n; 
 }while(i!=sp); 
return max_i; 
} 
void mfu() 
{ 
int i,j,k; 
for(i=0;i<m && sp<n;i++) 
 { 
 k=search(ref[i]); 
 if(k==-1) 
 { 
 frames[sp]=ref[i]; 
 count[sp]++; 
 faults++; 
 sp++; 
 for(j=0;j<n;j++) 
 mem[j][i]=frames[j]; 
 } 
 else
 count[k]++; 
 
 } 
 sp=0; 
for(;i<m;i++) 
 { 
 k = search(ref[i]); 
 if(k==-1) 
 { 
 sp = get_mfu(sp);
 frames[sp] = ref[i]; 
 count[sp]=1; 
 faults++; 
 sp = (sp+1)%n; 
 for(j=0;j<n;j++) 
 mem[j][i] = frames[j]; 
 } 
 else
 count[k]++; 
 } 
} 
 
int main() 
{ 
accept(); 
mfu(); 
disp(); 
return 0; 
}



Q2)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 100

void searchPattern(char *mode, char *filename, char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found!\n");
        return;
    }
    char line[256];
    int count = 0, lineNum = 0;
    while (fgets(line, sizeof(line), fp)) {
        lineNum++;
        char *pos = line;
        while ((pos = strstr(pos, pattern)) != NULL) {
            count++;
            printf("%s", strcmp(mode, "a") == 0 ? "" : "");
            if (strcmp(mode, "a") == 0)
                printf("Found at line %d: %s", lineNum, line);
            pos += strlen(pattern);
        }
    }
    fclose(fp);
    if (strcmp(mode, "c") == 0)
        printf("Total occurrences: %d\n", count);
}

int main() {
    char input[MAX], *args[10];
    char *token;
    pid_t pid;
    while (1) {
        printf("myshell$ ");
        fgets(input, MAX, stdin);
        input[strlen(input) - 1] = '\0';
        if (strcmp(input, "exit") == 0)
            break;
        int i = 0;
        token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;
        if (args[0] == NULL)
            continue;
        if (strcmp(args[0], "search") == 0) {
            if (i == 3)
                searchPattern("a", args[1], args[2]);
            else if (i == 4 && strcmp(args[1], "c") == 0)
                searchPattern("c", args[2], args[3]);
            else
                printf("Usage:\n search a filename pattern\n search c filename pattern\n");
            continue;
        }
        pid = fork();
        if (pid == 0) {
            if (execvp(args[0], args) == -1)
                perror("Command execution failed");
            exit(0);
        } else if (pid > 0)
            wait(NULL);
        else
            perror("Fork failed");
    }
    return 0;
}


