Q1)
#include <stdio.h>

int n;
int findmax(int a[]);

int main() {
    int seq[30], fr[5], pos[5], flag, max, i, j, m, k, s;
    int count = 1, pf = 0, p = 0;
    float pfr;

    printf("Enter maximum limit of the sequence: ");
    scanf("%d", &max);

    printf("\nEnter the sequence: ");
    for (i = 0; i < max; i++)
        scanf("%d", &seq[i]);

    printf("\nEnter no. of frames: ");
    scanf("%d", &n);

    fr[0] = seq[0];
    pf++;
    printf("%d\t", fr[0]);

    i = 1;
    while (count < n) {
        flag = 1;
        p++;
        for (j = 0; j < i; j++) {
            if (seq[i] == seq[j])
                flag = 0;
        }
        if (flag != 0) {
            fr[count] = seq[i];
            printf("%d\t", fr[count]);
            count++;
            pf++;
        }
        i++;
    }

    printf("\n");

    for (i = p; i < max; i++) {
        flag = 1;
        for (j = 0; j < n; j++) {
            if (seq[i] == fr[j])
                flag = 0;
        }
        if (flag != 0) {
            for (j = 0; j < n; j++) {
                m = fr[j];
                for (k = i; k < max; k++) {
                    if (seq[k] == m) {
                        pos[j] = k;
                        break;
                    } else
                        pos[j] = 1000;
                }
            }
            s = findmax(pos);
            fr[s] = seq[i];
            pf++;
        }
        for (j = 0; j < n; j++)
            printf("%d\t", fr[j]);
        printf("\n");
    }

    pfr = (float)pf / (float)max;
    printf("\nThe no. of page faults are %d\n", pf);

    return 0;
}

int findmax(int a[]) {
    int max = a[0], i, k = 0;
    for (i = 1; i < n; i++) {
        if (a[i] > max) {
            max = a[i];
            k = i;
        }
    }
    return k;
}


Q2)

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX 100

void searchPattern(char *mode, char *filename, char *pattern) {
    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("File not found!\n");
        return;
    }
    char line[256];
    int count = 0, lineNum = 0, found = 0;
    while (fgets(line, sizeof(line), fp)) {
        lineNum++;
        char *pos = strstr(line, pattern);
        if (pos != NULL) {
            if (strcmp(mode, "f") == 0) {
                printf("First occurrence at line %d: %s", lineNum, line);
                found = 1;
                break;
            }
            while (pos != NULL) {
                count++;
                pos = strstr(pos + 1, pattern);
            }
        }
    }
    fclose(fp);
    if (strcmp(mode, "c") == 0)
        printf("Total occurrences: %d\n", count);
    if (strcmp(mode, "f") == 0 && !found)
        printf("Pattern not found.\n");
}

int main() {
    char input[MAX], *args[10];
    char *token;
    pid_t pid;
    while (1) {
        printf("myshell$ ");
        fgets(input, MAX, stdin);
        input[strlen(input) - 1] = '\0';
        if (strcmp(input, "exit") == 0)
            break;
        int i = 0;
        token = strtok(input, " ");
        while (token != NULL) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;
        if (args[0] == NULL)
            continue;
        if (strcmp(args[0], "search") == 0) {
            if (i == 4 && (strcmp(args[1], "f") == 0 || strcmp(args[1], "c") == 0))
                searchPattern(args[1], args[2], args[3]);
            else
                printf("Usage:\n search f filename pattern\n search c filename pattern\n");
            continue;
        }
        pid = fork();
        if (pid == 0) {
            if (execvp(args[0], args) == -1)
                perror("Command execution failed");
            exit(0);
        } else if (pid > 0)
            wait(NULL);
        else
            perror("Fork failed");
    }
    return 0;
}

