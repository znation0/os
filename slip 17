Q1)
#include<stdio.h>
int main() 
{ 
 int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, 
flag2, flag3, i, j, k, pos, max, faults = 0; 
 printf("Enter number of frames: "); 
 scanf("%d", &no_of_frames); 
 
 printf("Enter number of pages: "); 
 scanf("%d", &no_of_pages); 
 
 printf("Enter page reference string: "); 

 
 for(i = 0; i < no_of_pages; ++i){ 
 scanf("%d", &pages[i]); 
 } 
 
 for(i = 0; i < no_of_frames; ++i){ 
 frames[i] = -1; 
 } 
 
 for(i = 0; i < no_of_pages; ++i){ 
 flag1 = flag2 = 0; 
 
 for(j = 0; j < no_of_frames; ++j){ 
 if(frames[j] == pages[i]){ 
 flag1 = flag2 = 1; 
 break; 
 } 
 } 
 
 if(flag1 == 0){ 
 for(j = 0; j < no_of_frames; ++j){ 
 if(frames[j] == -1){ 
 faults++; 
 frames[j] = pages[i]; 
 flag2 = 1; 
 break; 
 } 
 } 
 } 
 
 if(flag2 == 0){ 
 flag3 =0; 
 
 for(j = 0; j < no_of_frames; ++j){ 
 temp[j] = -1; 
 
 for(k = i + 1; k < no_of_pages; ++k){ 
 if(frames[j] == pages[k]){ 
 temp[j] = k; 
 break; 
 } 
 } 
 } 
 
 for(j = 0; j < no_of_frames; ++j){ 
 if(temp[j] == -1){ 
 pos = j; 
 flag3 = 1;
 break; 
 } 
 } 
 
 if(flag3 ==0){ 
 max = temp[0]; 
 pos = 0; 
 
 for(j = 1; j < no_of_frames; ++j){ 
 if(temp[j] > max){ 
 max = temp[j]; 
 pos = j; 
 } 
 } 
 } 
frames[pos] = pages[i]; 
faults++; 
 } 
 printf("\n"); 
 for(j = 0; j < no_of_frames; ++j){ 
 printf("%d\t", frames[j]); 
 } 
 } 
 printf("\n\nTotal Page Faults = %d", faults); 
 
 return 0; 
}

Q2)
#include<stdio.h>
void findWaitingTime(int processes[], int n, 
int bt[], int wt[]) 
{ 
wt[0] = 0; 
int i; 
for (i = 1; i < n ; i++ ){ 
wt[i] = bt[i-1] + wt[i-1] ; 
} 
} 
void findTurnAroundTime( int processes[], int n, 
int bt[], int wt[], int tat[]) 
{ 
int i; 
for ( i = 0; i < n ; i++) 
tat[i] = bt[i] + wt[i]; 
} 
void findavgTime( int processes[], int n, int bt[]) 
{ 
int wt[n], tat[n], total_wt = 0, total_tat = 0; 
findWaitingTime(processes, n, bt, wt); 
findTurnAroundTime(processes, n, bt, wt, tat); 
printf("Processes Burst time Waiting time Turn around time\n"); 
int i; 
for ( i=0; i<n; i++) 
{ 
total_wt = total_wt + wt[i]; 
total_tat = total_tat + tat[i]; 
printf(" %d ",(i+1)); 
printf(" %d ", bt[i] ); 

printf(" %d",wt[i] ); 
printf(" %d\n",tat[i] ); 
} 
int s=(float)total_wt / (float)n; 
int t=(float)total_tat / (float)n; 
printf("Average waiting time = %d",s); 
printf("\n"); 
printf("Average turn around time = %d ",t); 
} 
int main() 
{ 
int processes[] = { 1, 2, 3}; 
int n = sizeof processes / sizeof processes[0]; 
int burst_time[] = {10, 5, 8}; 
findavgTime(processes, n, burst_time); 
return 0; 
}
