Q1)
#include <stdio.h>

int n;
int findmax(int a[]);

int main() {
    int seq[30], fr[5], pos[5], flag, max, i, j, m, k, s;
    int count = 1, pf = 0, p = 0;
    float pfr;

    printf("Enter maximum limit of the sequence: ");
    scanf("%d", &max);

    printf("\nEnter the sequence: ");
    for (i = 0; i < max; i++)
        scanf("%d", &seq[i]);

    printf("\nEnter no. of frames: ");
    scanf("%d", &n);

    fr[0] = seq[0];
    pf++;
    printf("%d\t", fr[0]);

    i = 1;
    while (count < n) {
        flag = 1;
        p++;
        for (j = 0; j < i; j++) {
            if (seq[i] == seq[j])
                flag = 0;
        }
        if (flag != 0) {
            fr[count] = seq[i];
            printf("%d\t", fr[count]);
            count++;
            pf++;
        }
        i++;
    }

    printf("\n");

    for (i = p; i < max; i++) {
        flag = 1;
        for (j = 0; j < n; j++) {
            if (seq[i] == fr[j])
                flag = 0;
        }
        if (flag != 0) {
            for (j = 0; j < n; j++) {
                m = fr[j];
                for (k = i; k < max; k++) {
                    if (seq[k] == m) {
                        pos[j] = k;
                        break;
                    } else
                        pos[j] = 1000;
                }
            }
            s = findmax(pos);
            fr[s] = seq[i];
            pf++;
        }
        for (j = 0; j < n; j++)
            printf("%d\t", fr[j]);
        printf("\n");
    }

    pfr = (float)pf / (float)max;
    printf("\nThe no. of page faults are %d\n", pf);

    return 0;
}

int findmax(int a[]) {
    int max = a[0], i, k = 0;
    for (i = 1; i < n; i++) {
        if (a[i] > max) {
            max = a[i];
            k = i;
        }
    }
    return k;
}


Q2)
#include<stdio.h>

void main()
{
 void sorting(int pr[],int ar[],int br[],int n);
 void display(int pr[],int ar[],int br[],int n);
 void displayt(int pr[10],int ar[10],int br[10],int st[10],int ft[10],int wt[10],int tatt[10],int n);
 
   int i,n,p[10],at[10],bt[10],st[10],ft[10],wt[10],tat[10];
   float avgw=0,avgt=0;
   printf("How many processes :- \n");
      scanf("%d",&n);
      
   printf("Enter Arrival time of processes an burst time respectively :- \n");
   for(i=0;i<n;i++)
      {
         scanf("%d %d",&at[i],&bt[i]);
         p[i]=i;
      }
      
   printf("The entered processes are :- \n");
      display(p,at,bt,n);
      
   printf("The entered processes after sorting are :- \n");
      sorting(p,at,bt,n);
      display(p,at,bt,n);
      
   st[0]=0;   
   for(i=1;i<=n;i++)
   {
      st[i]=bt[i-1]+st[i-1];
   }	
   
   for(i=0;i<n;i++)
   {
      ft[i]=st[i]+bt[i];
      wt[i]=st[i]-at[i];
      tat[i]=ft[i]-at[i];
   }
   printf("The final process table is :- \n");
   displayt(p,at,bt,st,ft,wt,tat,n);
   
   
   for(i=0;i<n;i++)
   {
   avgw=avgw+wt[i];
   avgt=avgt+tat[i];
   }
   printf("Avg. waiting time = %2.2f \nAvg. turn around time = %2.2f \n",avgw/n,avgt/n);
}

void sorting(int pr[],int ar[],int br[],int n)
{
int i,j,temp;
for(i=0;i<n;i++)
{
for(j=0;j<n-1;j++)
{
if(ar[j]>ar[j+1])
{
temp=ar[j];
ar[j]=ar[j+1];
ar[j+1]=temp;

temp=pr[j];
pr[j]=pr[j+1];
pr[j+1]=temp;

temp=br[j];
br[j]=br[j+1];
br[j+1]=temp;
}
}
}
}

void display(int pr[],int ar[],int br[],int n)
{
int i;
printf("| Process \t| Arrival time \t| Burst time |\n");
for(i=0;i<46;i++)
{
printf("-");
}
printf("\n");
for(i=0;i<n;i++)
{
printf("| P%d      \t| %d         \t| %d          |\n",pr[i],ar[i],br[i]);
}
}


void displayt(int pr[10],int ar[10],int br[10],int sr[10],int fn[10],int wa[10],int tatt[10],int n)
{
int i;
printf("| Process | Arrival time | Burst time | Start time | Finish time | Waiting time | Turn around time |\n");
for(i=0;i<100;i++)
{
printf("-");
}
printf("\n");
for(i=0;i<n;i++)
{
printf("| P%d      | %2d           | %2d         | %2d         | %2d          | %2d           |%2d                 \n",pr[i],ar[i],br[i],sr[i],fn[i],wa[i],tatt[i]);
}
}
