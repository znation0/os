Q1)
#include<stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
            printf("\n ENTER THE NUMBER OF PAGES:\n");
      scanf("%d",&n);
            printf("\n ENTER THE PAGE NUMBER(reference string) :\n");
            for(i=1;i<=n;i++)
            scanf("%d",&a[i]);
            printf("\n ENTER THE NUMBER OF FRAMES :");
            scanf("%d",&no);
                 for(i=0;i<no;i++)
                        frame[i]= -1;
                                  j=0;
                        printf("\tref string\t page frames\n");
                    for(i=1;i<=n;i++)
                        {
                                    printf("%d\t\t",a[i]);
                                    avail=0;
                                    for(k=0;k<no;k++)
                                      if(frame[k]==a[i])
                                                avail=1;//page hit 
                                    if (avail==0)
                                    {
                                                frame[j]=a[i];
                                                j=(j+1)%no;
                                                count++;
                                                for(k=0;k<no;k++)
                                                printf("%d\t",frame[k]);
}
                                    printf("\n");
}
                        printf("Page Fault Is %d",count);
                        return 0;
}

 Q2)
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void make_toks(char *s, char *tok[]) 
{
    int i=0;
    char *p;
    p=strtok(s," \n");
    while(p!=NULL)
    {
        tok[i++]=p;
        p=strtok(NULL," \n");
    }
    tok[i]=NULL;
}

void search_first(char *fn, char *pat)
{
    FILE *fp=fopen(fn,"r");
    char line[1024];
    int ln=1,found=0;
    if(fp==NULL){printf("File not found.\n"); return;}
    while(fgets(line,1024,fp))
    {
        if(strstr(line,pat))
        {
            printf("Line %d: %s",ln,line);
            found=1;
            break;
        }
        ln++;
    }
    if(!found) printf("Pattern not found.\n");
    fclose(fp);
}

void search_all(char *fn, char *pat)
{
    FILE *fp=fopen(fn,"r");
    char line[1024];
    int ln=1,found=0;
    if(fp==NULL){printf("File not found.\n"); return;}
    while(fgets(line,1024,fp))
    {
        if(strstr(line,pat))
        {
            printf("Line %d: %s",ln,line);
            found=1;
        }
        ln++;
    }
    if(!found) printf("Pattern not found.\n");
    fclose(fp);
}

int main()
{
    char buff[1024],*args[64];
    int pid;
    while(1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff,1024,stdin);
        buff[strlen(buff)-1]='\0';
        make_toks(buff,args);
        if(args[0]==NULL) continue;
        if(strcmp(args[0],"exit")==0) break;
        if(strcmp(args[0],"search")==0)
        {
            if(args[1]==NULL||args[2]==NULL||args[3]==NULL)
            {
                printf("Usage: search [f|a] filename pattern\n");
                continue;
            }
            if(strcmp(args[1],"f")==0) search_first(args[2],args[3]);
            else if(strcmp(args[1],"a")==0) search_all(args[2],args[3]);
            else printf("Invalid option.\n");
            continue;
        }
        pid=fork();
        if(pid>0) wait(NULL);
        else
        {
            if(execvp(args[0],args)==-1) printf("Bad command.\n");
            exit(0);
        }
    }
    return 0;
}
