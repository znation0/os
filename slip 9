Q1)
#include<stdio.h>
int frame[5][2],nf; 
int searchFrames(int sv) 
{ 
 int x; 
 for(x=0;x<nf;x++) 
 { 
 if(sv==frame[x][0]) 
 { 
 return 0; 
 } 
 } 
 return 1; 
} 
void displayMemory() 
{ 
 int i; 
 printf("\n\nFrame Contains |"); 
 for(i=0;i<nf;i++) 
 printf(" %d | ",frame[i][0])
 int findFreeFrame() 
{ 
 int i,min=frame[0][1],ri=0; 
 for(i=0;i<nf;i++) 
 { 
 if(frame[i][1]==-1) 
 { 
 return i; 
 } 
 } 
 //LRU
 for(i=0;i<nf;i++) 
 { 
 if(min>frame[i][1]) 
 { 
 min=frame[i][1]; 
 ri=i; 
 } 
 } 
 return ri; 
} 
main() 
{ 
 int rs[]={8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2}; 
 int ts=0; 
 int n=15,i,j,pf=0,srch,insert_index; 
 printf("Enter how many frames"); 
 scanf("%d",&nf); 
 for(i=0;i<nf;i++) 
 { 
 for(j=0;j<2;j++) 
 frame[i][j]=-1; 
 } 
 displayMemory(); 
 for(i=0;i<n;i++) 
 { 
 srch=searchFrames(rs[i]); 
 if(srch==1) 
 { 
 pf++; 
 insert_index=findFreeFrame(); 
 frame[insert_index][0]=rs[i]; 
 frame[insert_index][1]=ts++; 
 } 
 
 displayMemory(); 
 } 
 printf("\n\nTotal Page Faults Occured is %d\n",pf);
 }

 Q2)
 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void make_toks(char *s, char *tok[]) 
{
    int i=0;
    char *p;
    p=strtok(s," \n");
    while(p!=NULL)
    {
        tok[i++]=p;
        p=strtok(NULL," \n");
    }
    tok[i]=NULL;
}

void search_first(char *fn, char *pat)
{
    FILE *fp=fopen(fn,"r");
    char line[1024];
    int ln=1,found=0;
    if(fp==NULL){printf("File not found.\n"); return;}
    while(fgets(line,1024,fp))
    {
        if(strstr(line,pat))
        {
            printf("Line %d: %s",ln,line);
            found=1;
            break;
        }
        ln++;
    }
    if(!found) printf("Pattern not found.\n");
    fclose(fp);
}

void search_all(char *fn, char *pat)
{
    FILE *fp=fopen(fn,"r");
    char line[1024];
    int ln=1,found=0;
    if(fp==NULL){printf("File not found.\n"); return;}
    while(fgets(line,1024,fp))
    {
        if(strstr(line,pat))
        {
            printf("Line %d: %s",ln,line);
            found=1;
        }
        ln++;
    }
    if(!found) printf("Pattern not found.\n");
    fclose(fp);
}

int main()
{
    char buff[1024],*args[64];
    int pid;
    while(1)
    {
        printf("myshell$");
        fflush(stdin);
        fgets(buff,1024,stdin);
        buff[strlen(buff)-1]='\0';
        make_toks(buff,args);
        if(args[0]==NULL) continue;
        if(strcmp(args[0],"exit")==0) break;
        if(strcmp(args[0],"search")==0)
        {
            if(args[1]==NULL||args[2]==NULL||args[3]==NULL)
            {
                printf("Usage: search [f|a] filename pattern\n");
                continue;
            }
            if(strcmp(args[1],"f")==0) search_first(args[2],args[3]);
            else if(strcmp(args[1],"a")==0) search_all(args[2],args[3]);
            else printf("Invalid option.\n");
            continue;
        }
        pid=fork();
        if(pid>0) wait(NULL);
        else
        {
            if(execvp(args[0],args)==-1) printf("Bad command.\n");
            exit(0);
        }
    }
    return 0;
}
