Q1)
#include<stdio.h>
int frame[5][2],nf; 
int searchFrames(int sv) 
{ 
 int x; 
 for(x=0;x<nf;x++) 
 { 
 if(sv==frame[x][0]) 
 { 
 return x; 
 } 
 } 
 return -2; 
} 
void displayMemory() 
{ 
 int i; 
 printf("\n\nFrame Contains |"); 
 for(i=0;i<nf;i++) 
 printf(" %d | ",frame[i][0]); 
} 
int findFreeFrame() 
{ 
 int i,min=frame[0][1],ri=0; 
 for(i=0;i<nf;i++) 
 { 
 if(frame[i][1]==-1) 
 { 
 return i; 
 } 
 } 
 for(i=0;i<nf;i++) 
 { 

 if(min>frame[i][1]) 
 { 
 min=frame[i][1]; 
 ri=i; 
 } 
 } 
 return ri; 
} 
main() 
{ 
 int rs[]={3,5,7,2,5,1,2,3,1,3,5,3,1,6,2}; 
 int ts=0; 
 int n=15,i,j,pf=0,srch,insert_index; 
 printf("Enter how many frames"); 
 scanf("%d",&nf); 
 for(i=0;i<nf;i++) 
 { 
 for(j=0;j<2;j++) 
 frame[i][j]=-1; 
 } 
 displayMemory(); 
 for(i=0;i<n;i++) 
 { 
 srch=searchFrames(rs[i]); 
 if(srch==-2) 
 { 
 pf++; 
 insert_index=findFreeFrame(); 
 frame[insert_index][0]=rs[i]; 
 frame[insert_index][1]=ts++; 
 } 
 else
 { 
 frame[srch][1]=ts++; 
 } 
 
 displayMemory(); 
 } 
 printf("\n\nTotal Page Faults Occured is %d\n",pf); 
}

Q2)
#include <sys/types.h>
#include<unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
while(p!=NULL) 
{ tok[i++]=p; 
 p=strtok(NULL," "); 
} 
tok[i]=NULL; 
} 
void count(char *fn, char op) 
{ int fh,cc=0,wc=0,lc=0; 
 char c; 
fh = open(fn,O_RDONLY); 
if(fh==-1) { 
printf("File %s not found.\n",fn); 
return; 
} 
while(read(fh,&c,1)>0) 
{ if(c==' ') 
 wc++; 
 else if(c=='\n') 
 { 
 wc++; 
 lc++; 
 } cc++; 
} close(fh); 
switch(op) 
{ 
 case 'c': 
printf("No.of characters:%d\n",cc-1); 
break; 
 case 'w': 
printf("No.of words:%d\n",wc); 
break; 
 case 'l': 
printf("No.of lines:%d\n",lc+1); 

break; 
} 
} int main() 
{ 
 char buff[80],*args[10]; 
 int pid; 
 while(1) { printf("myshell$ "); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
if(strcmp(args[0],"count")==0) 
count(args[2],args[1][0]); 
else 
 { pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 { 
if(execvp(args[0],args)==-1) 
printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}
