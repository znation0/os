Q1)
#include <stdio.h>

#define MAX_FRAMES 10
#define MAX_PAGES 50

int main() {
    int frames[MAX_FRAMES], freq[MAX_FRAMES], time[MAX_FRAMES];
    int pages[MAX_PAGES], n_frames, n_pages;
    int page_faults = 0;
    int i, j, min_freq, pos;

    printf("Enter number of frames: ");
    scanf("%d", &n_frames);

    printf("Enter number of pages: ");
    scanf("%d", &n_pages);

    printf("Enter the reference string: ");
    for (i = 0; i < n_pages; i++)
        scanf("%d", &pages[i]);

    for (i = 0; i < n_frames; i++) {
        frames[i] = -1; 
        freq[i] = 0;  
        time[i] = 0;    
    }

    int current_time = 0;

    for (i = 0; i < n_pages; i++) {
        int page = pages[i];
        current_time++;

    
        int found = -1;
        for (j = 0; j < n_frames; j++) {
            if (frames[j] == page) {
                found = j;
                break;
            }
        }

        if (found != -1) {
            
            freq[found]++;
            time[found] = current_time;
        } else {
            
            page_faults++;

        
            int empty = -1;
            for (j = 0; j < n_frames; j++) {
                if (frames[j] == -1) {
                    empty = j;
                    break;
                }
            }

            if (empty != -1) {
                frames[empty] = page;
                freq[empty] = 1;
                time[empty] = current_time;
            } else {
               
                min_freq = freq[0];
                pos = 0;
                for (j = 1; j < n_frames; j++) {
                    if (freq[j] < min_freq) {
                        min_freq = freq[j];
                        pos = j;
                    } else if (freq[j] == min_freq) {
                        if (time[j] < time[pos])
                            pos = j;
                    }
                }
                frames[pos] = page;
                freq[pos] = 1;         
                time[pos] = current_time;
            }
        }

        
        printf("Page %d -> Frames: ", page);
        for (j = 0; j < n_frames; j++)
            if (frames[j] != -1)
                printf("%d ", frames[j]);
        printf("\n");
    }

    printf("\nTotal page faults: %d\n", page_faults);
    return 0;
}


Q2)
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dirent.h>
#include <unistd.h>
void make_toks(char *s, char *tok[]) 
{ 
 int i=0; 
 char *p; 
 p = strtok(s," "); 
 while(p!=NULL) 
 { tok[i++]=p; 
 p=strtok(NULL," "); 
 } 
 tok[i]=NULL; 
} 
void list(char *dn, char op) 
{ 
 DIR *dp; 
 struct dirent *entry; 
 int dc=0,fc=0; 
 dp = opendir(dn); 
 if(dp==NULL) 
 { 
 printf("Dir %s not found.\n",dn); 
 return; 
 }
 switch(op) 
 { 
 case 'f': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\n",entry->d_name); 
 } break; 
 case 'n': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_DIR) dc++; 
 if(entry->d_type==DT_REG) fc++; 
 } 
 printf("%d Dir(s)\t%d File(s)\n",dc,fc); 
 break; 
 case 'i': 
 while(entry=readdir(dp)) 
 { 
 if(entry->d_type==DT_REG) 
 printf("%s\t%lu\n",entry->d_name,entry->d_fileno); 
 } 
 } 
 closedir(dp); 
} 
int main() { 
 char buff[80],*args[10]; 
 int pid; 
 while(1) 
 { 
 printf("myshell$"); 
 fflush(stdin); 
 fgets(buff,80,stdin); 
 buff[strlen(buff)-1]='\0'; 
 make_toks(buff,args); 
 if(strcmp(args[0],"list")==0) 
 list(args[2],args[1][0]); 
 else 
 { 
 pid = fork(); 
 if(pid>0) 
 wait(); 
 else 
 {
 if(execvp(args[0],args)==-1) 
 printf("Bad command.\n"); 
 } 
 } 
 } 
 return 0; 
}
